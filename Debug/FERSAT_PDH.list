
FERSAT_PDH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ecc  08000ecc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ecc  08000ecc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000ecc  08000ecc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ecc  08000ecc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000ed8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000ed8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f24  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d00  00000000  00000000  00023f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  00024c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000380  00000000  00000000  00025060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bedf  00000000  00000000  000253e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000039e7  00000000  00000000  000412bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba26  00000000  00000000  00044ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e06cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ec0  00000000  00000000  000e071c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000eb4 	.word	0x08000eb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000eb4 	.word	0x08000eb4

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	463b      	mov	r3, r7
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800022a:	2080      	movs	r0, #128	; 0x80
 800022c:	f7ff ffcc 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000230:	2001      	movs	r0, #1
 8000232:	f7ff ffc9 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000236:	2008      	movs	r0, #8
 8000238:	f7ff ffc6 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800023c:	2002      	movs	r0, #2
 800023e:	f7ff ffc3 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CS_F_GPIO_Port, CS_F_Pin);
 8000242:	2110      	movs	r1, #16
 8000244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000248:	f7ff ffd6 	bl	80001f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LED_R_Pin|LED_G_Pin);
 800024c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000250:	4813      	ldr	r0, [pc, #76]	; (80002a0 <MX_GPIO_Init+0x8c>)
 8000252:	f7ff ffd1 	bl	80001f8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CS_F_Pin;
 8000256:	2310      	movs	r3, #16
 8000258:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800025a:	2301      	movs	r3, #1
 800025c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800025e:	2303      	movs	r3, #3
 8000260:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_F_GPIO_Port, &GPIO_InitStruct);
 800026a:	463b      	mov	r3, r7
 800026c:	4619      	mov	r1, r3
 800026e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000272:	f000 fcbf 	bl	8000bf4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8000276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800027a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800027c:	2301      	movs	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000280:	2303      	movs	r3, #3
 8000282:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800028c:	463b      	mov	r3, r7
 800028e:	4619      	mov	r1, r3
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <MX_GPIO_Init+0x8c>)
 8000292:	f000 fcaf 	bl	8000bf4 <LL_GPIO_Init>

}
 8000296:	bf00      	nop
 8000298:	3718      	adds	r7, #24
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	48000c00 	.word	0x48000c00

080002a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f003 0307 	and.w	r3, r3, #7
 80002b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	68ba      	ldr	r2, [r7, #8]
 80002bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c0:	4013      	ands	r3, r2
 80002c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002d6:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	60d3      	str	r3, [r2, #12]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <__NVIC_GetPriorityGrouping+0x18>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	f003 0307 	and.w	r3, r3, #7
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	6039      	str	r1, [r7, #0]
 8000312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	db0a      	blt.n	8000332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	b2da      	uxtb	r2, r3
 8000320:	490c      	ldr	r1, [pc, #48]	; (8000354 <__NVIC_SetPriority+0x4c>)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	0112      	lsls	r2, r2, #4
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	440b      	add	r3, r1
 800032c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000330:	e00a      	b.n	8000348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <__NVIC_SetPriority+0x50>)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	f003 030f 	and.w	r3, r3, #15
 800033e:	3b04      	subs	r3, #4
 8000340:	0112      	lsls	r2, r2, #4
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	440b      	add	r3, r1
 8000346:	761a      	strb	r2, [r3, #24]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000e100 	.word	0xe000e100
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800035c:	b480      	push	{r7}
 800035e:	b089      	sub	sp, #36	; 0x24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f003 0307 	and.w	r3, r3, #7
 800036e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000370:	69fb      	ldr	r3, [r7, #28]
 8000372:	f1c3 0307 	rsb	r3, r3, #7
 8000376:	2b04      	cmp	r3, #4
 8000378:	bf28      	it	cs
 800037a:	2304      	movcs	r3, #4
 800037c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	3304      	adds	r3, #4
 8000382:	2b06      	cmp	r3, #6
 8000384:	d902      	bls.n	800038c <NVIC_EncodePriority+0x30>
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3b03      	subs	r3, #3
 800038a:	e000      	b.n	800038e <NVIC_EncodePriority+0x32>
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	f04f 32ff 	mov.w	r2, #4294967295
 8000394:	69bb      	ldr	r3, [r7, #24]
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	43da      	mvns	r2, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	401a      	ands	r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a4:	f04f 31ff 	mov.w	r1, #4294967295
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	43d9      	mvns	r1, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b4:	4313      	orrs	r3, r2
         );
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3724      	adds	r7, #36	; 0x24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
	...

080003c4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <LL_RCC_HSE_Enable+0x1c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <LL_RCC_HSE_Enable+0x1c>)
 80003ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <LL_RCC_HSE_IsReady+0x24>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80003f4:	d101      	bne.n	80003fa <LL_RCC_HSE_IsReady+0x16>
 80003f6:	2301      	movs	r3, #1
 80003f8:	e000      	b.n	80003fc <LL_RCC_HSE_IsReady+0x18>
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <LL_RCC_SetSysClkSource+0x24>)
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	f023 0203 	bic.w	r2, r3, #3
 800041c:	4904      	ldr	r1, [pc, #16]	; (8000430 <LL_RCC_SetSysClkSource+0x24>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4313      	orrs	r3, r2
 8000422:	608b      	str	r3, [r1, #8]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <LL_RCC_GetSysClkSource+0x18>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	f003 030c 	and.w	r3, r3, #12
}
 8000440:	4618      	mov	r0, r3
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <LL_RCC_SetAHBPrescaler+0x24>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000460:	4904      	ldr	r1, [pc, #16]	; (8000474 <LL_RCC_SetAHBPrescaler+0x24>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4313      	orrs	r3, r2
 8000466:	608b      	str	r3, [r1, #8]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000

08000478 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000488:	4904      	ldr	r1, [pc, #16]	; (800049c <LL_RCC_SetAPB1Prescaler+0x24>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	608b      	str	r3, [r1, #8]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000

080004a0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004b0:	4904      	ldr	r1, [pc, #16]	; (80004c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	608b      	str	r3, [r1, #8]
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000

080004c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <LL_RCC_PLL_Enable+0x1c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <LL_RCC_PLL_Enable+0x1c>)
 80004d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <LL_RCC_PLL_IsReady+0x24>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80004f8:	d101      	bne.n	80004fe <LL_RCC_PLL_IsReady+0x16>
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <LL_RCC_PLL_IsReady+0x18>
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
 800051c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000520:	68da      	ldr	r2, [r3, #12]
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000524:	4013      	ands	r3, r2
 8000526:	68f9      	ldr	r1, [r7, #12]
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	4311      	orrs	r1, r2
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	0212      	lsls	r2, r2, #8
 8000530:	4311      	orrs	r1, r2
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	430a      	orrs	r2, r1
 8000536:	4904      	ldr	r1, [pc, #16]	; (8000548 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000538:	4313      	orrs	r3, r2
 800053a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	f9ff808c 	.word	0xf9ff808c

08000550 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800055a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800055e:	60d3      	str	r3, [r2, #12]
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <LL_APB1_GRP1_EnableClock+0x2c>)
 800057a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800057c:	4907      	ldr	r1, [pc, #28]	; (800059c <LL_APB1_GRP1_EnableClock+0x2c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4313      	orrs	r3, r2
 8000582:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000586:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80005aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80005b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	40021000 	.word	0x40021000

080005d0 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <LL_FLASH_SetLatency+0x24>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f023 0207 	bic.w	r2, r3, #7
 80005e0:	4904      	ldr	r1, [pc, #16]	; (80005f4 <LL_FLASH_SetLatency+0x24>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	600b      	str	r3, [r1, #0]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	40022000 	.word	0x40022000

080005f8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <LL_FLASH_GetLatency+0x18>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 0307 	and.w	r3, r3, #7
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40022000 	.word	0x40022000

08000614 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000624:	4904      	ldr	r1, [pc, #16]	; (8000638 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	600b      	str	r3, [r1, #0]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	40007000 	.word	0x40007000

0800063c <LL_GPIO_SetOutputPin>:
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	619a      	str	r2, [r3, #24]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ff9f 	bl	80005a0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000662:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000666:	f7ff ff83 	bl	8000570 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066a:	2003      	movs	r0, #3
 800066c:	f7ff fe1a 	bl	80002a4 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000670:	f7ff fe3c 	bl	80002ec <__NVIC_GetPriorityGrouping>
 8000674:	4603      	mov	r3, r0
 8000676:	2200      	movs	r2, #0
 8000678:	210f      	movs	r1, #15
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe6e 	bl	800035c <NVIC_EncodePriority>
 8000680:	4603      	mov	r3, r0
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 30ff 	mov.w	r0, #4294967295
 8000688:	f7ff fe3e 	bl	8000308 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f812 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f7ff fdc0 	bl	8000214 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000694:	f000 f8a6 	bl	80007e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RED_LED_ON();
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <main+0x58>)
 800069e:	f7ff ffcd 	bl	800063c <LL_GPIO_SetOutputPin>
  GREEN_LED_ON();
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	4802      	ldr	r0, [pc, #8]	; (80006b0 <main+0x58>)
 80006a8:	f7ff ffc8 	bl	800063c <LL_GPIO_SetOutputPin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0x54>
 80006ae:	bf00      	nop
 80006b0:	48000c00 	.word	0x48000c00

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80006b8:	2004      	movs	r0, #4
 80006ba:	f7ff ff89 	bl	80005d0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 80006be:	bf00      	nop
 80006c0:	f7ff ff9a 	bl	80005f8 <LL_FLASH_GetLatency>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d1fa      	bne.n	80006c0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80006ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ce:	f7ff ffa1 	bl	8000614 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80006d2:	f7ff fe77 	bl	80003c4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80006d6:	bf00      	nop
 80006d8:	f7ff fe84 	bl	80003e4 <LL_RCC_HSE_IsReady>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d1fa      	bne.n	80006d8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_5, 32, LL_RCC_PLLR_DIV_2);
 80006e2:	2300      	movs	r3, #0
 80006e4:	2220      	movs	r2, #32
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	2003      	movs	r0, #3
 80006ea:	f7ff ff11 	bl	8000510 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80006ee:	f7ff ff2f 	bl	8000550 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80006f2:	f7ff fee9 	bl	80004c8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80006f6:	bf00      	nop
 80006f8:	f7ff fef6 	bl	80004e8 <LL_RCC_PLL_IsReady>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d1fa      	bne.n	80006f8 <SystemClock_Config+0x44>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000702:	2003      	movs	r0, #3
 8000704:	f7ff fe82 	bl	800040c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000708:	bf00      	nop
 800070a:	f7ff fe93 	bl	8000434 <LL_RCC_GetSysClkSource>
 800070e:	4603      	mov	r3, r0
 8000710:	2b0c      	cmp	r3, #12
 8000712:	d1fa      	bne.n	800070a <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fe9b 	bl	8000450 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800071a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800071e:	f7ff feab 	bl	8000478 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff febc 	bl	80004a0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <SystemClock_Config+0x84>)
 800072a:	f000 fb79 	bl	8000e20 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 800072e:	4802      	ldr	r0, [pc, #8]	; (8000738 <SystemClock_Config+0x84>)
 8000730:	f000 fb84 	bl	8000e3c <LL_SetSystemCoreClock>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	04c4b400 	.word	0x04c4b400

0800073c <LL_AHB2_GRP1_EnableClock>:
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000748:	4907      	ldr	r1, [pc, #28]	; (8000768 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4013      	ands	r3, r2
 8000758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	40021000 	.word	0x40021000

0800076c <LL_APB2_GRP1_EnableClock>:
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000776:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000778:	4907      	ldr	r1, [pc, #28]	; (8000798 <LL_APB2_GRP1_EnableClock+0x2c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4313      	orrs	r3, r2
 800077e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000782:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4013      	ands	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000

0800079c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f023 0210 	bic.w	r2, r3, #16
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	431a      	orrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	605a      	str	r2, [r3, #4]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f023 0208 	bic.w	r2, r3, #8
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	605a      	str	r2, [r3, #4]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b090      	sub	sp, #64	; 0x40
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	2228      	movs	r2, #40	; 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fb56 	bl	8000ea4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000808:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800080c:	f7ff ffae 	bl	800076c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff ff93 	bl	800073c <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000816:	23e0      	movs	r3, #224	; 0xe0
 8000818:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800081a:	2302      	movs	r3, #2
 800081c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800082a:	2305      	movs	r3, #5
 800082c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f000 f9dd 	bl	8000bf4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800083e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000842:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000844:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000848:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800084a:	2302      	movs	r3, #2
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800084e:	2301      	movs	r3, #1
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000858:	2300      	movs	r3, #0
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000864:	2307      	movs	r3, #7
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4619      	mov	r1, r3
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_SPI1_Init+0xa8>)
 8000870:	f000 fa64 	bl	8000d3c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000874:	2100      	movs	r1, #0
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_SPI1_Init+0xa8>)
 8000878:	f7ff ff90 	bl	800079c <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_SPI1_Init+0xa8>)
 800087e:	f7ff ffa0 	bl	80007c2 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3740      	adds	r7, #64	; 0x40
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40013000 	.word	0x40013000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000944 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000910:	f7ff ffea 	bl	80008e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <LoopForever+0x6>)
  ldr r1, =_edata
 8000916:	490d      	ldr	r1, [pc, #52]	; (800094c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <LoopForever+0xe>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <LoopForever+0x12>)
  ldr r4, =_ebss
 800092c:	4c0a      	ldr	r4, [pc, #40]	; (8000958 <LoopForever+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093a:	f000 fa8f 	bl	8000e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093e:	f7ff fe8b 	bl	8000658 <main>

08000942 <LoopForever>:

LoopForever:
    b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000944:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000950:	08000ed4 	.word	0x08000ed4
  ldr r2, =_sbss
 8000954:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000958:	20000020 	.word	0x20000020

0800095c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>

0800095e <LL_GPIO_SetPinMode>:
{
 800095e:	b480      	push	{r7}
 8000960:	b08b      	sub	sp, #44	; 0x2c
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	fa93 f3a3 	rbit	r3, r3
 8000978:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000984:	2320      	movs	r3, #32
 8000986:	e003      	b.n	8000990 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2103      	movs	r1, #3
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	401a      	ands	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009a0:	6a3b      	ldr	r3, [r7, #32]
 80009a2:	fa93 f3a3 	rbit	r3, r3
 80009a6:	61fb      	str	r3, [r7, #28]
  return result;
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80009b2:	2320      	movs	r3, #32
 80009b4:	e003      	b.n	80009be <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	fab3 f383 	clz	r3, r3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	431a      	orrs	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	372c      	adds	r7, #44	; 0x2c
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_GPIO_SetPinOutputType>:
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	401a      	ands	r2, r3
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	fb01 f303 	mul.w	r3, r1, r3
 80009f6:	431a      	orrs	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	605a      	str	r2, [r3, #4]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <LL_GPIO_SetPinSpeed>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b08b      	sub	sp, #44	; 0x2c
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa93 f3a3 	rbit	r3, r3
 8000a22:	613b      	str	r3, [r7, #16]
  return result;
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000a2e:	2320      	movs	r3, #32
 8000a30:	e003      	b.n	8000a3a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	fab3 f383 	clz	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	401a      	ands	r2, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	fa93 f3a3 	rbit	r3, r3
 8000a50:	61fb      	str	r3, [r7, #28]
  return result;
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	e003      	b.n	8000a68 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	fab3 f383 	clz	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	431a      	orrs	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	609a      	str	r2, [r3, #8]
}
 8000a76:	bf00      	nop
 8000a78:	372c      	adds	r7, #44	; 0x2c
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LL_GPIO_SetPinPull>:
{
 8000a82:	b480      	push	{r7}
 8000a84:	b08b      	sub	sp, #44	; 0x2c
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	fa93 f3a3 	rbit	r3, r3
 8000a9c:	613b      	str	r3, [r7, #16]
  return result;
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	e003      	b.n	8000ab4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fab3 f383 	clz	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	401a      	ands	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
 8000ac6:	fa93 f3a3 	rbit	r3, r3
 8000aca:	61fb      	str	r3, [r7, #28]
  return result;
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	e003      	b.n	8000ae2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	fab3 f383 	clz	r3, r3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	431a      	orrs	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	60da      	str	r2, [r3, #12]
}
 8000af0:	bf00      	nop
 8000af2:	372c      	adds	r7, #44	; 0x2c
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <LL_GPIO_SetAFPin_0_7>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	6a1a      	ldr	r2, [r3, #32]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa93 f3a3 	rbit	r3, r3
 8000b16:	613b      	str	r3, [r7, #16]
  return result;
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000b22:	2320      	movs	r3, #32
 8000b24:	e003      	b.n	8000b2e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	fab3 f383 	clz	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	210f      	movs	r1, #15
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	401a      	ands	r2, r3
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	fa93 f3a3 	rbit	r3, r3
 8000b44:	61fb      	str	r3, [r7, #28]
  return result;
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d101      	bne.n	8000b54 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000b50:	2320      	movs	r3, #32
 8000b52:	e003      	b.n	8000b5c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	fab3 f383 	clz	r3, r3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	431a      	orrs	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	621a      	str	r2, [r3, #32]
}
 8000b6a:	bf00      	nop
 8000b6c:	372c      	adds	r7, #44	; 0x2c
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <LL_GPIO_SetAFPin_8_15>:
{
 8000b76:	b480      	push	{r7}
 8000b78:	b08b      	sub	sp, #44	; 0x2c
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa93 f3a3 	rbit	r3, r3
 8000b92:	613b      	str	r3, [r7, #16]
  return result;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	e003      	b.n	8000baa <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	fab3 f383 	clz	r3, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	210f      	movs	r1, #15
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	61fb      	str	r3, [r7, #28]
  return result;
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	e003      	b.n	8000bda <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	fab3 f383 	clz	r3, r3
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	431a      	orrs	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000be8:	bf00      	nop
 8000bea:	372c      	adds	r7, #44	; 0x2c
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	fa93 f3a3 	rbit	r3, r3
 8000c0a:	60fb      	str	r3, [r7, #12]
  return result;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <LL_GPIO_Init+0x26>
    return 32U;
 8000c16:	2320      	movs	r3, #32
 8000c18:	e003      	b.n	8000c22 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fab3 f383 	clz	r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000c24:	e048      	b.n	8000cb8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d03a      	beq.n	8000cb2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d003      	beq.n	8000c4c <LL_GPIO_Init+0x58>
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d10e      	bne.n	8000c6a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	461a      	mov	r2, r3
 8000c52:	69b9      	ldr	r1, [r7, #24]
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fed7 	bl	8000a08 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	6819      	ldr	r1, [r3, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	461a      	mov	r2, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff feb7 	bl	80009d8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	69b9      	ldr	r1, [r7, #24]
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff05 	bl	8000a82 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d111      	bne.n	8000ca4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2bff      	cmp	r3, #255	; 0xff
 8000c84:	d807      	bhi.n	8000c96 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	69b9      	ldr	r1, [r7, #24]
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff34 	bl	8000afc <LL_GPIO_SetAFPin_0_7>
 8000c94:	e006      	b.n	8000ca4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	69b9      	ldr	r1, [r7, #24]
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff69 	bl	8000b76 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	69b9      	ldr	r1, [r7, #24]
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fe56 	bl	800095e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1af      	bne.n	8000c26 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <LL_SPI_IsEnabled>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce0:	2b40      	cmp	r3, #64	; 0x40
 8000ce2:	d101      	bne.n	8000ce8 <LL_SPI_IsEnabled+0x18>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e000      	b.n	8000cea <LL_SPI_IsEnabled+0x1a>
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_SPI_SetRxFIFOThreshold>:
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	605a      	str	r2, [r3, #4]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_SPI_SetCRCPolynomial>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	611a      	str	r2, [r3, #16]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffc0 	bl	8000cd0 <LL_SPI_IsEnabled>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d145      	bne.n	8000de2 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000d5e:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	6811      	ldr	r1, [r2, #0]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	6852      	ldr	r2, [r2, #4]
 8000d6a:	4311      	orrs	r1, r2
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	68d2      	ldr	r2, [r2, #12]
 8000d70:	4311      	orrs	r1, r2
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	6912      	ldr	r2, [r2, #16]
 8000d76:	4311      	orrs	r1, r2
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	6952      	ldr	r2, [r2, #20]
 8000d7c:	4311      	orrs	r1, r2
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	6992      	ldr	r2, [r2, #24]
 8000d82:	4311      	orrs	r1, r2
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	69d2      	ldr	r2, [r2, #28]
 8000d88:	4311      	orrs	r1, r2
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	6a12      	ldr	r2, [r2, #32]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d9e:	f023 0304 	bic.w	r3, r3, #4
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	6891      	ldr	r1, [r2, #8]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	6952      	ldr	r2, [r2, #20]
 8000daa:	0c12      	lsrs	r2, r2, #16
 8000dac:	430a      	orrs	r2, r1
 8000dae:	431a      	orrs	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dbc:	d204      	bcs.n	8000dc8 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8000dbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ff97 	bl	8000cf6 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dd0:	d105      	bne.n	8000dde <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff9f 	bl	8000d1c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <LL_InitTick+0x30>)
 8000e00:	3b01      	subs	r3, #1
 8000e02:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <LL_InitTick+0x30>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <LL_InitTick+0x30>)
 8000e0c:	2205      	movs	r2, #5
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000e28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ffdd 	bl	8000dec <LL_InitTick>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <LL_SetSystemCoreClock+0x1c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000

08000e5c <__libc_init_array>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	4d0d      	ldr	r5, [pc, #52]	; (8000e94 <__libc_init_array+0x38>)
 8000e60:	4c0d      	ldr	r4, [pc, #52]	; (8000e98 <__libc_init_array+0x3c>)
 8000e62:	1b64      	subs	r4, r4, r5
 8000e64:	10a4      	asrs	r4, r4, #2
 8000e66:	2600      	movs	r6, #0
 8000e68:	42a6      	cmp	r6, r4
 8000e6a:	d109      	bne.n	8000e80 <__libc_init_array+0x24>
 8000e6c:	4d0b      	ldr	r5, [pc, #44]	; (8000e9c <__libc_init_array+0x40>)
 8000e6e:	4c0c      	ldr	r4, [pc, #48]	; (8000ea0 <__libc_init_array+0x44>)
 8000e70:	f000 f820 	bl	8000eb4 <_init>
 8000e74:	1b64      	subs	r4, r4, r5
 8000e76:	10a4      	asrs	r4, r4, #2
 8000e78:	2600      	movs	r6, #0
 8000e7a:	42a6      	cmp	r6, r4
 8000e7c:	d105      	bne.n	8000e8a <__libc_init_array+0x2e>
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
 8000e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e84:	4798      	blx	r3
 8000e86:	3601      	adds	r6, #1
 8000e88:	e7ee      	b.n	8000e68 <__libc_init_array+0xc>
 8000e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e8e:	4798      	blx	r3
 8000e90:	3601      	adds	r6, #1
 8000e92:	e7f2      	b.n	8000e7a <__libc_init_array+0x1e>
 8000e94:	08000ecc 	.word	0x08000ecc
 8000e98:	08000ecc 	.word	0x08000ecc
 8000e9c:	08000ecc 	.word	0x08000ecc
 8000ea0:	08000ed0 	.word	0x08000ed0

08000ea4 <memset>:
 8000ea4:	4402      	add	r2, r0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d100      	bne.n	8000eae <memset+0xa>
 8000eac:	4770      	bx	lr
 8000eae:	f803 1b01 	strb.w	r1, [r3], #1
 8000eb2:	e7f9      	b.n	8000ea8 <memset+0x4>

08000eb4 <_init>:
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	bf00      	nop
 8000eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eba:	bc08      	pop	{r3}
 8000ebc:	469e      	mov	lr, r3
 8000ebe:	4770      	bx	lr

08000ec0 <_fini>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	bf00      	nop
 8000ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec6:	bc08      	pop	{r3}
 8000ec8:	469e      	mov	lr, r3
 8000eca:	4770      	bx	lr
